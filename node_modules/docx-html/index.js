#!/usr/bin/env node
const mammoth = require("mammoth");
const glob = require("glob")
const path = require("path")
const fs = require("fs")
const _ = require('underscore');
const chalk = require('chalk')
const pkg = require(path.resolve(process.cwd(), 'package.json'))

const config = Object.assign({}, {
	path: './static',
}, pkg.docxDir || {})

const htmlTemplate = `<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=0"
    />
    <title></title>
    <script>
    (function (l, f) {
      var c = l.documentElement,
        h = "orientationchange" in f ? "orientationchange" : "resize",
        g = function () {
          var i = c.clientWidth;
          if (!i) {
            return;
          }
          c.style.fontSize = (100 * (i / 375)) / 2 + "px";
        };
      if (!l.addEventListener) {
        return;
      }
      var b = function () {
        var i = l.documentElement.clientWidth;
        f.innerHeight;
        320 >= i && (i = 320), i >= 750 && (i = 750);
        var m = ((i / 375) * 100) / 2;
        l.documentElement.style.fontSize = m + "px";
      };
      b();
      f.addEventListener("resize", b);
      f.addEventListener(h, g, false);
      f.addEventListener("resize", b);
      l.addEventListener("DOMContentLoaded", g, false);
      console.log("屏幕dpr:", devicePixelRatio);
      var d = null;
      var j = l.getElementsByTagName("meta");
      for (var e = 0; e < j.length; e++) {
        if (j[e].getAttribute("name") === "viewport") {
          d = j[e];
          break;
        }
      }
      var a =
        "width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=0";
      if (/(iPhone|iPod|iPad)/i.test(f.navigator.userAgent)) {
        var k = parseInt(
          f.navigator.userAgent.match(
            /OS (\d+)_(\d+)_?(\d+)? like Mac OS X/i
          )[1]
        );
        if (k >= 11) {
          a += ", viewport-fit=cover";
        }
      }
      d.setAttribute("content", a);
    })(document, window);
    </script>
    <style>
      @font-face {font-family: The1Official_Bold; src: url('/static/fonts/The1Official_Bold.ttf?t=1525946179202');}
      @font-face {font-family: The1Official_Regular; src: url('/static/fonts/The1Official_Regular.ttf?t=1525946179202');}
      body {font-family: The1Official_Regular; margin: 0; padding: 0; font-size: .28rem; color: #333; padding: 0 .4rem;}
      ol,li,ul {list-style: none; margin: 0; padding: 0; }
      p {margin: .32rem 0;}
      .center {text-align: left; font-size: .44rem; font-family: The1Official_Bold; line-height: .66rem; margin: 0;}
      strong {font-weight: normal; font-family: The1Official_Bold;}
    </style>
  </head>
  <body>`
function transformElement(element) {
  if (element.children) {
    var children = _.map(element.children, transformElement);
    element = { ...element, children: children };
  }
  if (element.type === 'paragraph') {
    element = transformParagraph(element);
  }
  return element;
}
function transformParagraph(element) {
  if (element.alignment === 'center' && !element.styleId) {
      return { ...element, styleName: 'center' };
  } else {
      return element;
  }
}
var options = {
  styleMap: ['u => u', "p[style-name='center'] => p.center"],
  transformDocument: transformElement,
};
glob(path.join(process.cwd(), config.path, '**/*.docx'), {}, function (er, files) {
  // console.log(files)
  files.forEach((itemPath)=>{
    mammoth.convertToHtml({path: itemPath}, options)
      .then(function(result){
        const htmlPath = itemPath.replace('docx','html').replace(/\s+/g,"_");
        if(fs.existsSync(itemPath)){
          fs.unlinkSync(itemPath)
        }
        if(fs.existsSync(htmlPath)){
          fs.unlinkSync(htmlPath)
        }
        var html = `${htmlTemplate}${result.value}</body></html>`; // The generated HTML
        fs.writeFile(htmlPath, html, {flag:'a',encoding:'utf-8',mode:'0666'},function(err){
          const htmlName = htmlPath.split('/').pop();
          if(err){
              console.log(chalk.red(`${htmlName}文件写入失败`));
          }else{
              console.log(chalk.green(`${htmlName}文件写入成功`));
          }
         })
      })
      .done();
  })
})
